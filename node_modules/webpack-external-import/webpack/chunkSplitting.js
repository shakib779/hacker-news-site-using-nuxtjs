"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interleaveConfig = interleaveConfig;
exports.interleaveStyleConfig = interleaveStyleConfig;
exports.interleaveStyleJsConfig = interleaveStyleJsConfig;
exports.hasExternalizedModuleViaJson2 = exports.hasExternalizedModuleViaJson = void 0;

var pkgUp = require("pkg-up").sync();

var packageJson;

if (pkgUp) {
  // eslint-disable-next-line import/no-dynamic-require
  packageJson = require(pkgUp);
}

var hasExternalizedModuleViaJson = function hasExternalizedModuleViaJson(moduleResource) {
  var interleaveMap = packageJson.interleave;
  if (!moduleResource || !interleaveMap) return;
  var interleaveKeys = Object.keys(packageJson.interleave || {});

  if (interleaveKeys) {
    var foundMatch = interleaveKeys.find(function (item) {
      return moduleResource.includes(item);
    });
    return interleaveMap[foundMatch] || false;
  }
};

exports.hasExternalizedModuleViaJson = hasExternalizedModuleViaJson;

var hasExternalizedModuleViaJson2 = function hasExternalizedModuleViaJson2(moduleResource) {
  var interleaveMap = packageJson.interleave;
  if (!moduleResource || !interleaveMap) return;
  var interleaveKeys = Object.keys(packageJson.interleave || {});

  if (interleaveKeys) {
    var foundMatch = interleaveKeys.find(function (item) {
      return moduleResource.includes(item);
    });
    return interleaveMap[foundMatch] || false;
  }
};

exports.hasExternalizedModuleViaJson2 = hasExternalizedModuleViaJson2;

function interleaveConfig(_ref) {
  var testPath = _ref.testPath,
      manifestName = _ref.manifestName;
  return {
    test: function test(module) {
      // check if module has a resource path (not virtual modules)
      if (module.resource) {
        return module.resource.includes(testPath) && !!hasExternalizedModuleViaJson(module.resource, manifestName);
      }
    },
    name: function name(module) {
      // Check if module is listed in the interleave interface
      var foundValue = hasExternalizedModuleViaJson(module.resource, manifestName);
      if (foundValue) return foundValue;
      return false;
    },
    // force module into a chunk regardless of how its used
    enforce: true // might need for next.js
    // reuseExistingChunk: false,

  };
}

function interleaveStyleConfig(_ref2) {
  var manifestName = _ref2.manifestName;
  return {
    test: function test(module) {
      // check if module has a resource path (not virtual modules)
      if (module.constructor.name === "CssModule") {
        console.log("HAS MODULE CSS");
        return !!hasExternalizedModuleViaJson2(module.identifier(), manifestName);
      } // if (module.resource) {
      //   if (module.resource.includes(".css")) {
      //     console.log(
      //       "CSS",
      //       module.resource.includes(testPath),
      //       !!hasExternalizedModuleViaJson(module.resource, manifestName),
      //       module.resource
      //     );
      //     return (
      //       module.resource.includes(testPath) &&
      //       !!hasExternalizedModuleViaJson(module.resource, manifestName)
      //     );
      //   }
      // }

    },
    // eslint-disable-next-line no-unused-vars
    name: function name(module, chunks, cacheGroupKey) {
      // Check if module is listed in the interleave interface
      if (!module.resource) {
        var foundValue = hasExternalizedModuleViaJson2(module.resource || module.identifier(), manifestName);
        if (foundValue) return "".concat(foundValue, "-style");
      }

      return "styles";
    },
    // force module into a chunk regardless of how its used
    enforce: true,
    chunks: "all",
    // might need for next.js
    reuseExistingChunk: false
  };
}

function interleaveStyleJsConfig(_ref3) {
  var manifestName = _ref3.manifestName;
  return {
    test: function test(module) {
      if (module.constructor.name === "CssModule") {
        return false;
      }

      if (module.resource && module.resource.match(/\.(scss|css)$/)) {
        return true;
      }

      return false;
    },
    name: function name() {
      return "".concat(manifestName, "-stylejs");
    },
    chunks: "all",
    enforce: false
  };
}